# Generated by Django 5.2.4 on 2025-09-16 13:55

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import django_extensions.db.fields
import phonenumber_field.modelfields
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Campus',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('status', models.IntegerField(choices=[(0, 'Inactive'), (1, 'Active')], default=1, verbose_name='status')),
                ('activate_date', models.DateTimeField(blank=True, help_text='keep empty for an immediate activation', null=True)),
                ('deactivate_date', models.DateTimeField(blank=True, help_text='keep empty for indefinite activation', null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('is_deleted', models.BooleanField(default=False, help_text='Marks the record as deleted without removing it.')),
                ('metadata', models.JSONField(blank=True, default=dict, help_text='Stores additional metadata in JSON format.', null=True)),
                ('ip_address', models.GenericIPAddressField(blank=True, help_text='IP address associated with the record creation or update.', null=True)),
                ('name', models.CharField(help_text='Name of the campus (e.g., Paris, Reims).', max_length=100, unique=True)),
            ],
            options={
                'verbose_name': 'Campus',
                'verbose_name_plural': 'Campuses',
            },
        ),
        migrations.CreateModel(
            name='Program',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('status', models.IntegerField(choices=[(0, 'Inactive'), (1, 'Active')], default=1, verbose_name='status')),
                ('activate_date', models.DateTimeField(blank=True, help_text='keep empty for an immediate activation', null=True)),
                ('deactivate_date', models.DateTimeField(blank=True, help_text='keep empty for indefinite activation', null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('is_deleted', models.BooleanField(default=False, help_text='Marks the record as deleted without removing it.')),
                ('metadata', models.JSONField(blank=True, default=dict, help_text='Stores additional metadata in JSON format.', null=True)),
                ('ip_address', models.GenericIPAddressField(blank=True, help_text='IP address associated with the record creation or update.', null=True)),
                ('name', models.CharField(help_text='Name of the program (e.g., BACHELOR Chef de Projet Performance Energ√©tique).', max_length=200)),
                ('level', models.CharField(choices=[('Bachelor', 'Bachelor'), ('Master', 'Master')], help_text='Level of the program (Bachelor or Master).', max_length=50)),
                ('tuition_fee', models.DecimalField(decimal_places=2, help_text='Tuition fee for the program in EUR.', max_digits=10)),
                ('is_work_study', models.BooleanField(default=False, help_text='Indicates if the program is offered as a work-study contract.')),
                ('campuses', models.ManyToManyField(help_text='Campuses where this program is offered.', related_name='programs', to='admission.campus')),
            ],
            options={
                'verbose_name': 'Program',
                'verbose_name_plural': 'Programs',
            },
        ),
        migrations.CreateModel(
            name='NonEUAdmissionApplication',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('activate_date', models.DateTimeField(blank=True, help_text='keep empty for an immediate activation', null=True)),
                ('deactivate_date', models.DateTimeField(blank=True, help_text='keep empty for indefinite activation', null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('is_deleted', models.BooleanField(default=False, help_text='Marks the record as deleted without removing it.')),
                ('metadata', models.JSONField(blank=True, default=dict, help_text='Stores additional metadata in JSON format.', null=True)),
                ('ip_address', models.GenericIPAddressField(blank=True, help_text='IP address associated with the record creation or update.', null=True)),
                ('civility', models.CharField(blank=True, choices=[('Mr', 'Mr'), ('Mrs', 'Mrs')], help_text='Civility of the applicant (Mr/Mrs).', max_length=10)),
                ('first_name', models.CharField(help_text='First name of the applicant.', max_length=150)),
                ('last_name', models.CharField(help_text='Last name of the applicant.', max_length=150)),
                ('date_of_birth', models.DateField(help_text='Date of birth of the applicant.')),
                ('email', models.EmailField(help_text='Email address of the applicant.', max_length=254)),
                ('phone_number', phonenumber_field.modelfields.PhoneNumberField(help_text='Mobile phone number of the applicant.', max_length=128, region=None)),
                ('address', models.TextField(help_text='Permanent or current address of the applicant.')),
                ('postal_code', models.CharField(help_text="Postal code of the applicant's address.", max_length=20)),
                ('city', models.CharField(help_text="City of the applicant's address.", max_length=100)),
                ('country', models.CharField(help_text="Country of the applicant's address.", max_length=100)),
                ('cv', models.FileField(help_text='Uploaded CV (PDF/JPEG).', null=True, upload_to='admission_documents/cv/', validators=[django.core.validators.FileExtensionValidator(['pdf', 'jpg', 'jpeg', 'png'])])),
                ('motivation_letter', models.FileField(help_text='Uploaded motivation letter (PDF/JPEG).', null=True, upload_to='admission_documents/motivation_letter/', validators=[django.core.validators.FileExtensionValidator(['pdf', 'jpg', 'jpeg', 'png'])])),
                ('portfolio', models.FileField(blank=True, help_text='Uploaded portfolio (PDF/JPEG, optional).', null=True, upload_to='admission_documents/portfolio/', validators=[django.core.validators.FileExtensionValidator(['pdf', 'jpg', 'jpeg', 'png'])])),
                ('identity_document', models.FileField(help_text='Uploaded identity document (PDF/JPEG).', null=True, upload_to='admission_documents/identity/', validators=[django.core.validators.FileExtensionValidator(['pdf', 'jpg', 'jpeg', 'png'])])),
                ('photo', models.ImageField(help_text='Uploaded identity photo (JPEG/PNG).', null=True, upload_to='admission_documents/photos/', validators=[django.core.validators.FileExtensionValidator(['jpg', 'jpeg', 'png'])])),
                ('academic_records', models.FileField(help_text='Uploaded academic records or transcripts (PDF/JPEG).', null=True, upload_to='admission_documents/academic_records/', validators=[django.core.validators.FileExtensionValidator(['pdf', 'jpg', 'jpeg', 'png'])])),
                ('declaration_accepted', models.BooleanField(default=False, help_text='Indicates if the applicant has accepted the declaration.')),
                ('how_heard', models.JSONField(blank=True, default=dict, help_text='Stores how the applicant heard about Green Up Academy (e.g., Internet, Word of Mouth).')),
                ('application_date', models.DateTimeField(default=django.utils.timezone.now, help_text='Date and time when the application was submitted.')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('reviewed', 'Reviewed'), ('accepted', 'Accepted'), ('rejected', 'Rejected')], default='pending', help_text='Status of the application.', max_length=50)),
                ('place_of_birth', models.CharField(help_text='Place of birth of the applicant.', max_length=100)),
                ('nationality', models.CharField(help_text='Nationality of the applicant.', max_length=100)),
                ('passport_number', models.CharField(help_text='Passport number of the applicant.', max_length=50)),
                ('level_of_studies', models.CharField(help_text='Level of studies of the applicant (e.g., Bachelor, Master).', max_length=100)),
                ('parent_last_name', models.CharField(blank=True, help_text='Last name of the parent or guardian.', max_length=150, null=True)),
                ('parent_first_name', models.CharField(blank=True, help_text='First name of the parent or guardian.', max_length=150, null=True)),
                ('parent_phone_number', phonenumber_field.modelfields.PhoneNumberField(blank=True, help_text='Phone number of the parent or guardian.', max_length=128, null=True, region=None)),
                ('parent_email', models.EmailField(blank=True, help_text='Email address of the parent or guardian.', max_length=254, null=True)),
                ('parent_address', models.TextField(blank=True, help_text='Address of the parent or guardian.', null=True)),
                ('parent_postal_code', models.CharField(blank=True, help_text="Postal code of the parent's address.", max_length=20, null=True)),
                ('parent_city', models.CharField(blank=True, help_text="City of the parent's address.", max_length=100, null=True)),
                ('parent_country', models.CharField(blank=True, help_text="Country of the parent's address.", max_length=100, null=True)),
                ('diploma_details', models.TextField(help_text='Details of the diploma obtained or in progress.')),
                ('diploma_institution', models.CharField(help_text='Institution where the diploma was obtained.', max_length=200)),
                ('diploma_city_country', models.CharField(help_text='City and country of the diploma institution.', max_length=200)),
                ('diploma_year', models.CharField(help_text='Year the diploma was obtained or expected.', max_length=4)),
                ('language_certificate', models.FileField(blank=True, help_text='Uploaded language proficiency certificate (PDF/JPEG, for non-francophones).', null=True, upload_to='admission_documents/language_certificates/', validators=[django.core.validators.FileExtensionValidator(['pdf', 'jpg', 'jpeg', 'png'])])),
                ('campus', models.ForeignKey(help_text='Selected campus for the application.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_applications', to='admission.campus')),
                ('user', models.ForeignKey(help_text='User submitting the application.', on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_admission_applications', to=settings.AUTH_USER_MODEL)),
                ('program', models.ForeignKey(help_text='Selected program for the application.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_applications', to='admission.program')),
            ],
            options={
                'verbose_name': 'Non-EU Admission Application',
                'verbose_name_plural': 'Non-EU Admission Applications',
            },
        ),
        migrations.CreateModel(
            name='EUAdmissionApplication',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('activate_date', models.DateTimeField(blank=True, help_text='keep empty for an immediate activation', null=True)),
                ('deactivate_date', models.DateTimeField(blank=True, help_text='keep empty for indefinite activation', null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('is_deleted', models.BooleanField(default=False, help_text='Marks the record as deleted without removing it.')),
                ('metadata', models.JSONField(blank=True, default=dict, help_text='Stores additional metadata in JSON format.', null=True)),
                ('ip_address', models.GenericIPAddressField(blank=True, help_text='IP address associated with the record creation or update.', null=True)),
                ('civility', models.CharField(blank=True, choices=[('Mr', 'Mr'), ('Mrs', 'Mrs')], help_text='Civility of the applicant (Mr/Mrs).', max_length=10)),
                ('first_name', models.CharField(help_text='First name of the applicant.', max_length=150)),
                ('last_name', models.CharField(help_text='Last name of the applicant.', max_length=150)),
                ('date_of_birth', models.DateField(help_text='Date of birth of the applicant.')),
                ('email', models.EmailField(help_text='Email address of the applicant.', max_length=254)),
                ('phone_number', phonenumber_field.modelfields.PhoneNumberField(help_text='Mobile phone number of the applicant.', max_length=128, region=None)),
                ('address', models.TextField(help_text='Permanent or current address of the applicant.')),
                ('postal_code', models.CharField(help_text="Postal code of the applicant's address.", max_length=20)),
                ('city', models.CharField(help_text="City of the applicant's address.", max_length=100)),
                ('country', models.CharField(help_text="Country of the applicant's address.", max_length=100)),
                ('cv', models.FileField(help_text='Uploaded CV (PDF/JPEG).', null=True, upload_to='admission_documents/cv/', validators=[django.core.validators.FileExtensionValidator(['pdf', 'jpg', 'jpeg', 'png'])])),
                ('motivation_letter', models.FileField(help_text='Uploaded motivation letter (PDF/JPEG).', null=True, upload_to='admission_documents/motivation_letter/', validators=[django.core.validators.FileExtensionValidator(['pdf', 'jpg', 'jpeg', 'png'])])),
                ('portfolio', models.FileField(blank=True, help_text='Uploaded portfolio (PDF/JPEG, optional).', null=True, upload_to='admission_documents/portfolio/', validators=[django.core.validators.FileExtensionValidator(['pdf', 'jpg', 'jpeg', 'png'])])),
                ('identity_document', models.FileField(help_text='Uploaded identity document (PDF/JPEG).', null=True, upload_to='admission_documents/identity/', validators=[django.core.validators.FileExtensionValidator(['pdf', 'jpg', 'jpeg', 'png'])])),
                ('photo', models.ImageField(help_text='Uploaded identity photo (JPEG/PNG).', null=True, upload_to='admission_documents/photos/', validators=[django.core.validators.FileExtensionValidator(['jpg', 'jpeg', 'png'])])),
                ('academic_records', models.FileField(help_text='Uploaded academic records or transcripts (PDF/JPEG).', null=True, upload_to='admission_documents/academic_records/', validators=[django.core.validators.FileExtensionValidator(['pdf', 'jpg', 'jpeg', 'png'])])),
                ('declaration_accepted', models.BooleanField(default=False, help_text='Indicates if the applicant has accepted the declaration.')),
                ('how_heard', models.JSONField(blank=True, default=dict, help_text='Stores how the applicant heard about Green Up Academy (e.g., Internet, Word of Mouth).')),
                ('application_date', models.DateTimeField(default=django.utils.timezone.now, help_text='Date and time when the application was submitted.')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('reviewed', 'Reviewed'), ('accepted', 'Accepted'), ('rejected', 'Rejected')], default='pending', help_text='Status of the application.', max_length=50)),
                ('last_diploma', models.CharField(help_text='Last diploma obtained or in progress.', max_length=200)),
                ('institution', models.CharField(help_text='Institution where the last diploma was obtained.', max_length=200)),
                ('institution_city_country', models.CharField(help_text='City and country of the institution.', max_length=200)),
                ('year_obtained', models.CharField(help_text='Year the diploma was obtained or expected.', max_length=4)),
                ('apprenticeship_status', models.CharField(choices=[('yes', 'Yes'), ('no', 'No'), ('undecided', 'Undecided')], default='undecided', help_text='Status of apprenticeship for the program.', max_length=20)),
                ('registration_fee', models.DecimalField(decimal_places=2, default=1200.0, help_text='Registration fee in EUR, refundable under certain conditions.', max_digits=10)),
                ('declaration_place', models.CharField(help_text='Place where the declaration was signed.', max_length=100)),
                ('declaration_date', models.DateField(help_text='Date when the declaration was signed.')),
                ('signature', models.FileField(help_text='Uploaded handwritten or digital signature (PDF/JPEG).', null=True, upload_to='admission_documents/signatures/', validators=[django.core.validators.FileExtensionValidator(['pdf', 'jpg', 'jpeg', 'png'])])),
                ('campus', models.ForeignKey(help_text='Selected campus for the application.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_applications', to='admission.campus')),
                ('user', models.ForeignKey(help_text='User submitting the application.', on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_admission_applications', to=settings.AUTH_USER_MODEL)),
                ('program', models.ForeignKey(help_text='Selected program for the application.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_applications', to='admission.program')),
            ],
            options={
                'verbose_name': 'EU Admission Application',
                'verbose_name_plural': 'EU Admission Applications',
            },
        ),
    ]
