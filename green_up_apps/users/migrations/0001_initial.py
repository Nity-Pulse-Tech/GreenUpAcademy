# Generated by Django 5.2.4 on 2025-09-05 14:10

import django.db.models.deletion
import django.utils.timezone
import django_extensions.db.fields
import green_up_apps.users.managers
import green_up_apps.users.models
import phonenumber_field.modelfields
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CompanySettings',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('status', models.IntegerField(choices=[(0, 'Inactive'), (1, 'Active')], default=1, verbose_name='status')),
                ('activate_date', models.DateTimeField(blank=True, help_text='keep empty for an immediate activation', null=True)),
                ('deactivate_date', models.DateTimeField(blank=True, help_text='keep empty for indefinite activation', null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('is_deleted', models.BooleanField(default=False, help_text='Marks the record as deleted without removing it.')),
                ('metadata', models.JSONField(blank=True, default=dict, help_text='Stores additional metadata in JSON format.', null=True)),
                ('ip_address', models.GenericIPAddressField(blank=True, help_text='IP address associated with the record creation or update.', null=True)),
                ('company_name', models.CharField(default='Soprescom', help_text='The official name of the company', max_length=255)),
                ('company_logo', models.ImageField(blank=True, help_text='Main company logo (preferably in SVG or PNG format)', null=True, upload_to='company/logo/')),
                ('favicon', models.ImageField(blank=True, help_text='Favicon for the website', null=True, upload_to='company/favicon/')),
                ('is_active', models.BooleanField(default=True, help_text='Mark this configuration as active')),
                ('primary_email', models.EmailField(default='contact@soprescom.com', help_text='Primary contact email address', max_length=254)),
                ('support_email', models.EmailField(blank=True, help_text='Customer support email address', max_length=254, null=True)),
                ('sales_email', models.EmailField(blank=True, help_text='Sales inquiries email address', max_length=254, null=True)),
                ('phone_number', phonenumber_field.modelfields.PhoneNumberField(blank=True, help_text='Primary contact phone number', max_length=128, null=True, region=None)),
                ('secondary_phone', phonenumber_field.modelfields.PhoneNumberField(blank=True, help_text='Secondary contact phone number', max_length=128, null=True, region=None)),
                ('physical_address', models.TextField(blank=True, help_text='Physical company address', null=True)),
                ('postal_address', models.CharField(blank=True, help_text='Postal address if different from physical address', max_length=255, null=True)),
                ('facebook_url', models.URLField(blank=True, null=True)),
                ('twitter_url', models.URLField(blank=True, null=True)),
                ('linkedin_url', models.URLField(blank=True, null=True)),
                ('instagram_url', models.URLField(blank=True, null=True)),
                ('youtube_url', models.URLField(blank=True, null=True)),
                ('tax_id', models.CharField(blank=True, help_text='Company tax identification number', max_length=100, null=True)),
                ('registration_number', models.CharField(blank=True, help_text='Company registration number', max_length=100, null=True)),
                ('vat_percentage', models.DecimalField(decimal_places=2, default=0.0, help_text='VAT percentage applied to products/services', max_digits=5)),
                ('working_hours', models.CharField(default='Monday-Friday, 9:00 AM - 5:00 PM', help_text='Company working hours', max_length=255)),
                ('timezone', models.CharField(default='UTC', help_text='Company timezone', max_length=50)),
                ('terms_of_service', models.TextField(blank=True, help_text='Terms of service content', null=True)),
                ('privacy_policy', models.TextField(blank=True, help_text='Privacy policy content', null=True)),
                ('refund_policy', models.TextField(blank=True, help_text='Refund policy content', null=True)),
                ('meta_title', models.CharField(blank=True, help_text='Default meta title for SEO', max_length=60, null=True)),
                ('meta_description', models.TextField(blank=True, help_text='Default meta description for SEO', null=True)),
                ('meta_keywords', models.TextField(blank=True, help_text='Default meta keywords for SEO', null=True)),
            ],
            options={
                'verbose_name': 'Company Configuration',
                'verbose_name_plural': 'Company Configurations',
                'ordering': ['-is_active', 'company_name'],
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('status', models.IntegerField(choices=[(0, 'Inactive'), (1, 'Active')], default=1, verbose_name='status')),
                ('activate_date', models.DateTimeField(blank=True, help_text='keep empty for an immediate activation', null=True)),
                ('deactivate_date', models.DateTimeField(blank=True, help_text='keep empty for indefinite activation', null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('is_deleted', models.BooleanField(default=False, help_text='Marks the record as deleted without removing it.')),
                ('metadata', models.JSONField(blank=True, default=dict, help_text='Stores additional metadata in JSON format.', null=True)),
                ('email', models.EmailField(error_messages={'unique': 'A user with that email already exists.'}, max_length=254, unique=True, verbose_name='email address')),
                ('fullname', models.CharField(blank=True, help_text='Full name of the user.', max_length=100, null=True)),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into the admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect instead of deleting accounts.', verbose_name='active')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('ip_address', models.GenericIPAddressField(blank=True, help_text="User's IP address.", null=True)),
                ('is_admin', models.BooleanField(default=False, help_text='User is an admin.', verbose_name='is admin')),
                ('is_manually_deleted', models.BooleanField(default=False, help_text='Marks if the user was manually deleted.', verbose_name='is manually deleted')),
                ('has_accepted_terms', models.BooleanField(default=False, help_text='Indicates whether the user has accepted the Terms of Service and Privacy Policy during registration.', verbose_name='has accepted terms')),
                ('profile_picture', models.ImageField(blank=True, help_text="User's profile picture.", null=True, upload_to='profile/', verbose_name='Profile Picture')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
            },
            managers=[
                ('objects', green_up_apps.users.managers.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Partners',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('status', models.IntegerField(choices=[(0, 'Inactive'), (1, 'Active')], default=1, verbose_name='status')),
                ('activate_date', models.DateTimeField(blank=True, help_text='keep empty for an immediate activation', null=True)),
                ('deactivate_date', models.DateTimeField(blank=True, help_text='keep empty for indefinite activation', null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('is_deleted', models.BooleanField(default=False, help_text='Marks the record as deleted without removing it.')),
                ('metadata', models.JSONField(blank=True, default=dict, help_text='Stores additional metadata in JSON format.', null=True)),
                ('ip_address', models.GenericIPAddressField(blank=True, help_text='IP address associated with the record creation or update.', null=True)),
                ('name', models.CharField(help_text='Name of the partner organization.', max_length=255, unique=True, verbose_name='Name')),
                ('slug', models.SlugField(blank=True, help_text='URL-friendly identifier for the partner.', max_length=255, null=True, unique=True)),
                ('description', models.TextField(blank=True, help_text='Description of the partner organization.', verbose_name='Description')),
                ('logo', models.ImageField(blank=True, help_text="Partner's logo image.", max_length=1000, null=True, upload_to=green_up_apps.users.models.partner_logo_path, verbose_name='Logo')),
                ('website', models.URLField(blank=True, help_text="Partner's website URL.", null=True, verbose_name='Website')),
                ('is_active', models.BooleanField(default=True, help_text='Indicates whether the partner is actively displayed.', verbose_name='Is Active')),
            ],
            options={
                'verbose_name': 'Partner',
                'verbose_name_plural': 'Partners',
                'indexes': [models.Index(fields=['slug'], name='users_partn_slug_f9c181_idx'), models.Index(fields=['is_deleted'], name='users_partn_is_dele_2bb370_idx')],
            },
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('status', models.IntegerField(choices=[(0, 'Inactive'), (1, 'Active')], default=1, verbose_name='status')),
                ('activate_date', models.DateTimeField(blank=True, help_text='keep empty for an immediate activation', null=True)),
                ('deactivate_date', models.DateTimeField(blank=True, help_text='keep empty for indefinite activation', null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('is_deleted', models.BooleanField(default=False, help_text='Marks the record as deleted without removing it.')),
                ('metadata', models.JSONField(blank=True, default=dict, help_text='Stores additional metadata in JSON format.', null=True)),
                ('ip_address', models.GenericIPAddressField(blank=True, help_text='IP address associated with the record creation or update.', null=True)),
                ('country', models.CharField(blank=True, max_length=20, verbose_name='Country')),
                ('phone_number', models.CharField(blank=True, max_length=15, verbose_name='Phone Number')),
                ('region', models.CharField(blank=True, default='Paris', max_length=20, verbose_name='Region')),
                ('city', models.CharField(blank=True, max_length=20, verbose_name='City')),
                ('address', models.CharField(blank=True, max_length=100, verbose_name='Address')),
                ('zip_code', models.CharField(blank=True, default='00000', max_length=20, verbose_name='Zip Code')),
                ('user', models.OneToOneField(help_text='Associated user account.', on_delete=django.db.models.deletion.PROTECT, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Profile',
                'verbose_name_plural': 'Profiles',
            },
        ),
        migrations.CreateModel(
            name='ContactUs',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('status', models.IntegerField(choices=[(0, 'Inactive'), (1, 'Active')], default=1, verbose_name='status')),
                ('activate_date', models.DateTimeField(blank=True, help_text='keep empty for an immediate activation', null=True)),
                ('deactivate_date', models.DateTimeField(blank=True, help_text='keep empty for indefinite activation', null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('is_deleted', models.BooleanField(default=False, help_text='Marks the record as deleted without removing it.')),
                ('metadata', models.JSONField(blank=True, default=dict, help_text='Stores additional metadata in JSON format.', null=True)),
                ('ip_address', models.GenericIPAddressField(blank=True, help_text='IP address associated with the record creation or update.', null=True)),
                ('name', models.CharField(help_text='Nom de la personne soumettant le formulaire.', max_length=255, verbose_name='Nom')),
                ('email', models.EmailField(help_text='Adresse email de contact.', max_length=254, verbose_name='Email')),
                ('subject', models.CharField(help_text='Sujet de la demande.', max_length=255, verbose_name='Sujet')),
                ('message', models.TextField(help_text='Contenu de la demande.', verbose_name='Message')),
                ('is_resolved', models.BooleanField(default=False, help_text="Champ conservé pour compatibilité avec l'admin, non utilisé dans le dashboard.", verbose_name='Est Résolu')),
                ('is_read', models.BooleanField(default=False, help_text='Indique si le message a été ouvert/lu par un admin.', verbose_name='Est Lu')),
                ('user', models.ForeignKey(blank=True, help_text="Utilisateur ayant soumis le formulaire, s'il est authentifié.", null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='contact_requests', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Contactez-nous',
                'verbose_name_plural': 'Entrées Contactez-nous',
                'ordering': ['-created'],
                'indexes': [models.Index(fields=['email'], name='users_conta_email_f8d2ff_idx'), models.Index(fields=['is_deleted'], name='users_conta_is_dele_db2ac1_idx'), models.Index(fields=['created'], name='users_conta_created_38606f_idx')],
            },
        ),
    ]
